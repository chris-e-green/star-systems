//
//  Name.swift
// names - generate random names from frequency data.
//
//  Created by Christopher Green on 9/5/2016.
//  Copyright Â© 2016 Christopher Green. All rights reserved.
//

import Foundation

extension String {
  var first: String {
    return String(characters.prefix(1))
  }
  var last: String {
    return String(characters.suffix(1))
  }
  var uppercaseFirst: String {
    return first.uppercaseString + String(characters.dropFirst())
  }
}

class Name:CustomStringConvertible {
  //let wordLengthFreq:[Int] = [26,662,4615,6977,10541,13341,14392,13284,11079,8468,5769,3700,2272,1202,668,283,158,64,40,16,1,5,2]
  //var wordLengthCD:[Int] = []
  let wordLengthCD:[Int] = [97565, 26, 688, 5303, 12280, 22821, 36162, 50554, 63838, 74917, 83385, 89154, 92854, 95126, 96328, 96996, 97279, 97437, 97501, 97541, 97557, 97558, 97563, 97565]

  //let initialLetterFreq:[Int] = [11602,4702,3511,2670,2007,3779,1950,7232,6286,597,590,2705,4383,2365,6264,2545,173,1653,7755,16671,1487,649,6753,17,1620,34]
  //var initialLetterCD:[Int] = []
  let initialLetterCD:[Int] = [100000, 11602, 16304, 19815, 22485, 24492, 28271, 30221, 37453, 43739, 44336, 44926, 47631, 52014, 54379, 60643, 63188, 63361, 65014, 72769, 89440, 90927, 91576, 98329, 98346, 99966, 100000]
  var name: String = ""
  var maxNameLength = 0
  /*let followingLetterFreq:[Character:[Int]] = [
    "a":[  1, 20, 33, 52,  0, 12, 18,  5, 39,  1, 12, 57, 26,181,  1, 20,  1, 75, 95,104,  9, 20, 13,  1, 26,  1],
    "b":[ 11,  1,  0,  0, 47,  0,  0,  0,  6,  1,  0, 17,  0,  0, 19,  0,  0, 11,  2,  1, 21,  0,  0,  0, 11,  0],
    "c":[ 31,  0,  4,  0, 38,  0,  0, 38, 10,  0, 18,  9,  0,  0, 45,  0,  1, 11,  1, 15,  7,  0,  0,  0,  1,  0],
    "d":[ 48, 20,  9, 13, 57, 11,  7, 25, 50,  3,  1, 11, 14, 16, 41,  6,  0, 14, 35, 56, 10,  2, 19,  0, 10,  0],
    "e":[110, 23, 45,126, 48, 30, 15, 33, 41,  3,  5, 55, 47,111, 33, 28,  2,169,115, 83,  6, 24, 50,  9, 26,  0],
    "f":[ 25,  2,  3,  2, 20, 11,  1,  8, 23,  1,  0,  8,  5,  1, 40,  2,  0, 16,  5, 37,  8,  0,  3,  0,  2,  0],
    "g":[ 24,  3,  2,  2, 28,  3,  4, 35, 18,  1,  0,  7,  3,  4, 23,  1,  0, 12,  9, 16,  7,  0,  5,  0,  1,  0],
    "h":[114,  2,  2,  1,302,  2,  1,  6, 97,  0,  0,  2,  3,  1, 49,  1,  0,  8,  5, 32,  8,  0,  4,  0,  4,  0],
    "i":[ 10,  5, 32, 33, 23, 17, 25,  6,  1,  1,  8, 37, 37,179, 24,  6,  0, 27, 86, 93,  1, 14,  7,  2,  0,  2],
    "j":[  2,  0,  0,  0,  2,  0,  0,  0,  3,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0],
    "k":[  6,  1,  1,  1, 29,  1,  0,  2, 14,  0,  0,  2,  1,  9,  4,  0,  0,  0,  5,  4,  1,  0,  2,  0,  2,  0],
    "l":[ 40,  3,  2, 36, 64, 10,  1,  4, 47,  0,  3, 56,  4,  2, 41,  3,  0,  2, 11, 15,  8,  3,  5,  0, 31,  0],
    "m":[ 44,  7,  1,  1, 68,  2,  1,  3, 25,  0,  0,  1,  5,  2, 29, 11,  0,  3, 10,  9,  8,  0,  4,  0, 18,  0],
    "n":[ 40,  7, 25,146, 66,  8, 92, 16, 33,  2,  8,  9,  7,  8, 60,  4,  1,  3, 33,106,  6,  2, 12,  0, 11,  0],
    "o":[ 16, 12, 13, 18,  5, 80,  7, 11, 12,  1, 13, 26, 48,106, 36, 15,  0, 84, 28, 57,115, 12, 46,  0,  5,  1],
    "p":[ 23,  1,  0,  0, 30,  1,  0,  3, 12,  0,  0, 15,  1,  0, 21, 10,  0, 18,  5, 11,  6,  0,  1,  0,  1,  0],
    "q":[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0],
    "r":[ 50,  7, 10, 20,133,  8, 10, 12, 50,  1,  8, 10, 14, 16, 55,  6,  0, 14, 37, 42, 12,  4, 11,  0, 21,  0],
    "s":[ 67, 11, 17,  7, 74, 11,  4, 50, 49,  2,  6, 13, 12, 10, 57, 20,  2,  4, 43,109, 20,  2, 24,  0,  4,  0],
    "t":[ 59, 10, 11,  7, 75,  9,  3,330, 76,  1,  2, 17, 11,  7,115,  4,  0, 28, 34, 56, 17,  1, 31,  0, 16,  0],
    "u":[  7,  5, 12,  7,  7,  2, 14,  2,  8,  0,  1, 34,  8, 36,  1, 16,  0, 44, 35, 48,  0,  0,  2,  0,  1,  0],
    "v":[  5,  0,  0,  0, 65,  0,  0,  0, 11,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0],
    "w":[ 66,  1,  1,  2, 39,  1,  0, 44, 39,  0,  0,  2,  1, 12, 29,  0,  0,  3,  4,  4,  1,  0,  2,  0,  1,  0],
    "x":[  1,  0,  2,  0,  1,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0],
    "y":[ 18,  7,  6,  6, 14,  7,  3, 10, 11,  1,  1,  4,  6,  3, 36,  4,  0,  3, 19, 20,  1,  1, 12,  0,  2,  0],
    "z":[  1,  0,  0,  0,  3,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]] 
  
  var followingLetterCD:[Character:[Int]] = [
    "a":[], "b":[], "c":[], "d":[], "e":[], "f":[], "g":[], "h":[], 
    "i":[], "j":[], "k":[], "l":[], "m":[], "n":[], "o":[], "p":[], 
    "q":[], "r":[], "s":[], "t":[], "u":[], "v":[], "w":[], "x":[], 
    "y":[], "z":[]]
  */
  let followingLetterCD:[Character:[Int]] = [
    "w": [ 252,  66,  67,  68,  70, 109, 110, 110, 154, 193, 193, 193, 195, 196, 208, 237, 237, 237, 240,  244,  248,  249,  249,  251,  251,  252,  252], 
    "n": [ 705,  40,  47,  72, 218, 284, 292, 384, 400, 433, 435, 443, 452, 459, 467, 527, 531, 532, 535,  568,  674,  680,  682,  694,  694,  705,  705], 
    "u": [ 290,   7,  12,  24,  31,  38,  40,  54,  56,  64,  64,  65,  99, 107, 143, 144, 160, 160, 204,  239,  287,  287,  287,  289,  289,  290,  290], 
    "v": [  86,   5,   5,   5,   5,  70,  70,  70,  70,  81,  81,  81,  81,  81,  81,  85,  85,  85,  85,   85,   85,   85,   85,   85,   85,   86,   86], 
    "x": [  12,   1,   1,   3,   3,   4,   4,   4,   4,   6,   6,   6,   6,   6,   6,   6,   9,   9,   9,    9,   12,   12,   12,   12,   12,   12,   12], 
    "q": [   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,    0,    0,    9,    9,    9,    9,    9,    9], 
    "b": [ 148,  11,  12,  12,  12,  59,  59,  59,  59,  65,  66,  66,  83,  83,  83, 102, 102, 102, 113,  115,  116,  137,  137,  137,  137,  148,  148], 
    "r": [ 551,  50,  57,  67,  87, 220, 228, 238, 250, 300, 301, 309, 319, 333, 349, 404, 410, 410, 424,  461,  503,  515,  519,  530,  530,  551,  551], 
    "c": [ 229,  31,  31,  35,  35,  73,  73,  73, 111, 121, 121, 139, 148, 148, 148, 193, 193, 194, 205,  206,  221,  228,  228,  228,  228,  229,  229], 
    "e": [1237, 110, 133, 178, 304, 352, 382, 397, 430, 471, 474, 479, 534, 581, 692, 725, 753, 755, 924, 1039, 1122, 1128, 1152, 1202, 1211, 1237, 1237], 
    "y": [ 195,  18,  25,  31,  37,  51,  58,  61,  71,  82,  83,  84,  88,  94,  97, 133, 137, 137, 140,  159,  179,  180,  181,  193,  193,  195,  195], 
    "h": [ 644, 114, 116, 118, 119, 421, 423, 424, 430, 527, 527, 527, 529, 532, 533, 582, 583, 583, 591,  596,  628,  636,  636,  640,  640,  644,  644], 
    "j": [  18,   2,   2,   2,   2,   4,   4,   4,   4,   7,   7,   7,   7,   7,   7,  10,  10,  10,  10,   10,   10,   18,   18,   18,   18,   18,   18], 
    "p": [ 159,  23,  24,  24,  24,  54,  55,  55,  58,  70,  70,  70,  85,  86,  86, 107, 117, 117, 135,  140,  151,  157,  157,  158,  158,  159,  159], 
    "f": [ 223,  25,  27,  30,  32,  52,  63,  64,  72,  95,  96,  96, 104, 109, 110, 150, 152, 152, 168,  173,  210,  218,  218,  221,  221,  223,  223], 
    "o": [ 767,  16,  28,  41,  59,  64, 144, 151, 162, 174, 175, 188, 214, 262, 368, 404, 419, 419, 503,  531,  588,  703,  715,  761,  761,  766,  767], 
    "k": [  85,   6,   7,   8,   9,  38,  39,  39,  41,  55,  55,  55,  57,  58,  67,  71,  71,  71,  71,   76,   80,   81,   81,   83,   83,   85,   85], 
    "d": [ 478,  48,  68,  77,  90, 147, 158, 165, 190, 240, 243, 244, 255, 269, 285, 326, 332, 332, 346,  381,  437,  447,  449,  468,  468,  478,  478], 
    "t": [ 920,  59,  69,  80,  87, 162, 171, 174, 504, 580, 581, 583, 600, 611, 618, 733, 737, 737, 765,  799,  855,  872,  873,  904,  904,  920,  920], 
    "z": [   5,   1,   1,   1,   1,   4,   4,   4,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,    5,    5,    5,    5,    5,    5,    5,    5], 
    "a": [ 823,   1,  21,  54, 106, 106, 118, 136, 141, 180, 181, 193, 250, 276, 457, 458, 478, 479, 554,  649,  753,  762,  782,  795,  796,  822,  823], 
    "i": [ 676,  10,  15,  47,  80, 103, 120, 145, 151, 152, 153, 161, 198, 235, 414, 438, 444, 444, 471,  557,  650,  651,  665,  672,  674,  674,  676], 
    "m": [ 252,  44,  51,  52,  53, 121, 123, 124, 127, 152, 152, 152, 153, 158, 160, 189, 200, 200, 203,  213,  222,  230,  230,  234,  234,  252,  252], 
    "s": [ 618,  67,  78,  95, 102, 176, 187, 191, 241, 290, 292, 298, 311, 323, 333, 390, 410, 412, 416,  459,  568,  588,  590,  614,  614,  618,  618], 
    "g": [ 208,  24,  27,  29,  31,  59,  62,  66, 101, 119, 120, 120, 127, 130, 134, 157, 158, 158, 170,  179,  195,  202,  202,  207,  207,  208,  208], 
    "l": [ 391,  40,  43,  45,  81, 145, 155, 156, 160, 207, 207, 210, 266, 270, 272, 313, 316, 316, 318,  329,  344,  352,  355,  360,  360,  391,  391]
  ]

  /*
  var c = 0
  wordLengthCD.append(0)
  for i in wordLengthFreq {
    c = c + i
    wordLengthCD.append(c)
  }
  wordLengthCD[0] = c

  print("wordLengthCD=\(wordLengthCD)")

  c = 0
  initialLetterCD.append(0)
  for i in initialLetterFreq {
    c = c + i
    initialLetterCD.append(c)
  }
  initialLetterCD[0] = c

  print("initialLetterCD=\(initialLetterCD)")

  for i in 1...26 {
    c = 0
    var ch:Character = Character(UnicodeScalar(i+96))
    followingLetterCD[ch]!.append(0)
    for i in followingLetterFreq[ch]! {
      c = c + i
      followingLetterCD[ch]!.append(c)
    }
    followingLetterCD[ch]![0] = c
  }

  print("followingLetterCD=\(followingLetterCD)")
  */
//  convenience init(maxLength:Int) {
//    print("maxlength=\(maxLength)")
//    self.init(_maxLength:maxLength)
//  }

//  convenience init() {
//    self.init(maxLength:0)
//  }

  init(maxLength:Int = 0) {
    maxNameLength = maxLength
    generate()
  }

  func generate() {
    let u = Int(arc4random_uniform(UInt32(wordLengthCD[0])))
    var nameLen = 1
    for index in 1..<wordLengthCD.count {
      if wordLengthCD[index] >= u {
        nameLen = index
        break
      }
    }
    if maxNameLength != 0 && nameLen > maxNameLength { nameLen = maxNameLength }

    let v = Int(arc4random_uniform(UInt32(initialLetterCD[0])))
    var initLetter:Character = " "
    for index in 1..<initialLetterCD.count {
      if initialLetterCD[index] >= v {
        initLetter = Character(UnicodeScalar(index+96))
        break
      }
    }

    name.append(initLetter)
    var cl = initLetter
    for _ in 1..<nameLen {
      var x = followingLetterCD[cl]!
      let w = Int(arc4random_uniform(UInt32(x[0])))
      for index in 1..<followingLetterCD[cl]!.count {
        let value = followingLetterCD[cl]![index]
        if value >= w {
          let letter = Character(UnicodeScalar(index+96))
          cl = letter
          break
        }
      }
      name.append(cl)
    }
    name = name.uppercaseFirst
  }

  var description:String {
    return name
  }
}
//print("Name is \(name.uppercaseFirst)")
/*
if Process.argc == 1 {
  print(Name())
} else {
  if let maxLen = Int(Process.arguments[1]) {
    print(Name(_maxLength:maxLen))
  } else {
    print("\(Process.arguments[0]) [maxLength]")
  }
}
*/
/*var n = Name(maxLength:5)
print(n)
var m = Name()
print(m)
*/

